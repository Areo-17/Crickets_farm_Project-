[2024-08-09 18:48:52,240] {taskinstance.py:896} INFO - Dependencies all met for <TaskInstance: grillos_operations.create_silver_gold 2024-08-09T05:25:00+00:00 [queued]>
[2024-08-09 18:48:52,334] {taskinstance.py:896} INFO - Dependencies all met for <TaskInstance: grillos_operations.create_silver_gold 2024-08-09T05:25:00+00:00 [queued]>
[2024-08-09 18:48:52,335] {taskinstance.py:1087} INFO - 
--------------------------------------------------------------------------------
[2024-08-09 18:48:52,335] {taskinstance.py:1088} INFO - Starting attempt 1 of 2
[2024-08-09 18:48:52,335] {taskinstance.py:1089} INFO - 
--------------------------------------------------------------------------------
[2024-08-09 18:48:52,383] {taskinstance.py:1107} INFO - Executing <Task(PostgresOperator): create_silver_gold> on 2024-08-09T05:25:00+00:00
[2024-08-09 18:48:52,416] {standard_task_runner.py:52} INFO - Started process 1896 to run task
[2024-08-09 18:48:52,469] {standard_task_runner.py:76} INFO - Running: ['***', 'tasks', 'run', 'grillos_operations', 'create_silver_gold', '2024-08-09T05:25:00+00:00', '--job-id', '157', '--pool', 'default_pool', '--raw', '--subdir', 'DAGS_FOLDER/database_dag.py', '--cfg-path', '/tmp/tmpan7le2ru', '--error-file', '/tmp/tmplrgx5zt2']
[2024-08-09 18:48:52,506] {standard_task_runner.py:77} INFO - Job 157: Subtask create_silver_gold
[2024-08-09 18:48:52,703] {logging_mixin.py:104} INFO - Running <TaskInstance: grillos_operations.create_silver_gold 2024-08-09T05:25:00+00:00 [running]> on host 9a7f3bfa7ef6
[2024-08-09 18:48:53,073] {taskinstance.py:1302} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_OWNER=***
AIRFLOW_CTX_DAG_ID=grillos_operations
AIRFLOW_CTX_TASK_ID=create_silver_gold
AIRFLOW_CTX_EXECUTION_DATE=2024-08-09T05:25:00+00:00
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2024-08-09T05:25:00+00:00
[2024-08-09 18:48:53,075] {postgres.py:68} INFO - Executing: 
    CREATE TABLE IF NOT EXISTS silver.aggregated_data (
        fecha_registro DATE,
        fecha_nacimiento DATE,
        tipo TEXT,
        volumen INT,
        fecha_reproduccion_esperada DATE,
        fecha_sacrificio_esperada DATE
    );

    -- Ingestar datos desde farm-data hacia silver
    INSERT INTO silver.aggregated_data
    SELECT 
        fecha_registro::date,
        fecha_nacimiento::date,
        tipo,
        volumen,
        CASE 
            WHEN tipo = 'R' THEN fecha_nacimiento::date + interval '42 days'
            WHEN tipo = 'S' THEN fecha_nacimiento::date + interval '45 days'
        END as fecha_reproduccion_esperada,
        CASE 
            WHEN tipo = 'R' THEN fecha_nacimiento::date + interval '54 days'
            WHEN tipo = 'S' THEN fecha_nacimiento::date + interval '35 days'
        END as fecha_sacrificio_esperada
    FROM "farm-data";

    -- Crear y poblar la tabla gold
    DROP TABLE IF EXISTS gold.monthly_production;
    CREATE TABLE gold.monthly_production AS
    WITH pre AS (
        SELECT 
            count(*) as number_of_boxes,
            EXTRACT(MONTH FROM fecha_sacrificio_esperada) as month,
            tipo as type
        FROM silver.aggregated_data
        GROUP BY 2, 3
    ),
    prod AS (
        SELECT 
            month,
            type,
            number_of_boxes,
            CASE 
                WHEN type = 'E' THEN number_of_boxes * 2.5
                WHEN type = 'R' THEN number_of_boxes * 1.5
            END as flour_produced_kg
        FROM pre
    )
    SELECT
        TO_CHAR(TO_DATE(month::text, 'MM'), 'Month') as mes, 
        sum(number_of_boxes) as numero_de_cajas,
        sum(flour_produced_kg) as total_kg_harina
    FROM prod
    GROUP BY 1;
    
[2024-08-09 18:48:53,167] {base.py:78} INFO - Using connection to: id: ***_conn. Host: db, Port: 5432, Schema: grillos, Login: ***, Password: ***, extra: {}
[2024-08-09 18:48:53,208] {dbapi.py:204} INFO - Running statement: 
    CREATE TABLE IF NOT EXISTS silver.aggregated_data (
        fecha_registro DATE,
        fecha_nacimiento DATE,
        tipo TEXT,
        volumen INT,
        fecha_reproduccion_esperada DATE,
        fecha_sacrificio_esperada DATE
    );

    -- Ingestar datos desde farm-data hacia silver
    INSERT INTO silver.aggregated_data
    SELECT 
        fecha_registro::date,
        fecha_nacimiento::date,
        tipo,
        volumen,
        CASE 
            WHEN tipo = 'R' THEN fecha_nacimiento::date + interval '42 days'
            WHEN tipo = 'S' THEN fecha_nacimiento::date + interval '45 days'
        END as fecha_reproduccion_esperada,
        CASE 
            WHEN tipo = 'R' THEN fecha_nacimiento::date + interval '54 days'
            WHEN tipo = 'S' THEN fecha_nacimiento::date + interval '35 days'
        END as fecha_sacrificio_esperada
    FROM "farm-data";

    -- Crear y poblar la tabla gold
    DROP TABLE IF EXISTS gold.monthly_production;
    CREATE TABLE gold.monthly_production AS
    WITH pre AS (
        SELECT 
            count(*) as number_of_boxes,
            EXTRACT(MONTH FROM fecha_sacrificio_esperada) as month,
            tipo as type
        FROM silver.aggregated_data
        GROUP BY 2, 3
    ),
    prod AS (
        SELECT 
            month,
            type,
            number_of_boxes,
            CASE 
                WHEN type = 'E' THEN number_of_boxes * 2.5
                WHEN type = 'R' THEN number_of_boxes * 1.5
            END as flour_produced_kg
        FROM pre
    )
    SELECT
        TO_CHAR(TO_DATE(month::text, 'MM'), 'Month') as mes, 
        sum(number_of_boxes) as numero_de_cajas,
        sum(flour_produced_kg) as total_kg_harina
    FROM prod
    GROUP BY 1;
    , parameters: None
[2024-08-09 18:48:53,303] {dbapi.py:212} INFO - Rows affected: 7
[2024-08-09 18:48:53,327] {postgres.py:72} INFO - NOTICE:  relation "aggregated_data" already exists, skipping

[2024-08-09 18:48:53,385] {taskinstance.py:1211} INFO - Marking task as SUCCESS. dag_id=grillos_operations, task_id=create_silver_gold, execution_date=20240809T052500, start_date=20240809T184852, end_date=20240809T184853
[2024-08-09 18:48:53,583] {taskinstance.py:1265} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2024-08-09 18:48:53,719] {local_task_job.py:149} INFO - Task exited with return code 0
